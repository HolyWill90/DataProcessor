"""
Cleanup utility for Financial Harmonizer

This script identifies and removes redundant or unnecessary files
that are no longer needed after UI improvements.
"""
import os
import sys
import shutil
from pathlib import Path
import logging
import argparse

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def get_project_root():
    """Get the project root directory."""
    return Path(__file__).parent

def identify_redundant_files():
    """Identify redundant files that can be safely removed."""
    project_root = get_project_root()
    
    # Define files that are now redundant due to UI improvements
    redundant_files = {
        project_root / "enhanced_ui.py": "Replaced by run.py",
        project_root / "simple_ui.py": "Replaced by tkinter_app.py", 
        project_root / "simple_ui_fixed.py": "Generated by fix_ui.py, only used as fallback",
        project_root / "ui_streamlit.py": "Replaced by streamlit_app.py",
        project_root / "cleanup_ui.py": "Replaced by delete_redundant_files.py",
        project_root / "../enhanced_ui.py": "External copy, redundant"
    }
    
    # Check which redundant files actually exist
    existing_files = {}
    for file_path, description in redundant_files.items():
        if file_path.exists():
            existing_files[file_path] = description
    
    return existing_files

def delete_files(files_to_delete, backup=True):
    """Delete the specified files with optional backup."""
    if not files_to_delete:
        logger.info("No files to delete")
        return {"success": [], "failed": []}
        
    results = {"success": [], "failed": []}
    backup_dir = Path("./ui_backup_deleted")
    
    if backup and files_to_delete:
        os.makedirs(backup_dir, exist_ok=True)
        logger.info(f"Created backup directory: {backup_dir}")
    
    for file_path in files_to_delete:
        path = Path(file_path)
        try:
            if backup:
                # Create backup
                backup_path = backup_dir / path.name
                shutil.copy2(path, backup_path)
                logger.info(f"Backed up {path} to {backup_path}")
            
            # Delete the file
            os.remove(path)
            logger.info(f"Deleted {path}")
            results["success"].append(str(path))
        except Exception as e:
            logger.error(f"Failed to delete {path}: {e}")
            results["failed"].append(str(path))
    
    return results

def main():
    """Main function."""
    parser = argparse.ArgumentParser(description="Clean up redundant files")
    parser.add_argument('--delete', action='store_true', help='Delete redundant files')
    parser.add_argument('--no-backup', dest='backup', action='store_false', 
                        help='Disable backup when deleting files')
    parser.set_defaults(backup=True)
    
    args = parser.parse_args()
    
    print("============================================================")
    print(" FINANCIAL HARMONIZER CLEANUP UTILITY")
    print("============================================================")
    print("")
    print("This utility helps identify and remove redundant files that are")
    print("no longer needed after UI improvements.")
    
    # Identify redundant files
    redundant_files = identify_redundant_files()
    
    print("")
    print("============================================================")
    print(" REDUNDANT FILES (SAFE TO DELETE)")
    print("============================================================")
    
    if redundant_files:
        for file_path, description in redundant_files.items():
            print(f"âœ— {file_path} - {description}")
    else:
        print("No redundant files found!")
    
    # Delete redundant files if requested
    if args.delete and redundant_files:
        print("")
        print("Deleting redundant files...")
        results = delete_files(redundant_files, backup=args.backup)
        
        print(f"Successfully deleted {len(results['success'])} files.")
        if results["failed"]:
            print(f"Failed to delete {len(results['failed'])} files.")
            for file_path in results["failed"]:
                print(f"  - {file_path}")
    
    print("")
    print("============================================================")
    print(" SUMMARY")
    print("============================================================")
    
    print(f"Redundant files: {len(redundant_files)}")
    
    if not args.delete and redundant_files:
        print("\nTo delete redundant files, run:")
        print("python -m financial_harmonizer.cleanup --delete")
    
    print("\nYour Financial Harmonizer installation now has a cleaner,")
    print("more maintainable structure with unified entry points.")
    print("\nUse the new unified entry point to run the application:")
    print("python -m financial_harmonizer.run")

if __name__ == "__main__":
    main()